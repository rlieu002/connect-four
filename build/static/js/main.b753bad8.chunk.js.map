{"version":3,"sources":["connectFour.js","gameComponent.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["isStateValid","gameState","countColors","numYellow","numRed","checkEmptySlots","play","column","color","newGameState","getRow","winner","row","length","countConnectedRow","checkColumnWin","forEach","rowArr","numConnected","endColumn","i","countConnectedColumn","type","checkMoves","checkColor","columnRec","connectedRow","console","log","checkEmptyBelow","connectedColumnStraight","connectedColumnForward","endColumnForward","connectedColumnBackward","emptyBelow","Game","state","mode","onClickMove","bind","onClickRestart","toggleMode","tableRows","this","map","columns","style","styles","yellowPlayer","redPlayer","cell","buttonRow","button","key","moveButton","onClick","value","border","e","target","setState","move","cf","computerMove","error","defenseMove","offenseMove","Math","floor","random","button1","activeButton","button2","className","src","logo","alt","width","modeContainer","renderTable","Component","borderRadius","backgroundColor","height","margin","cursor","display","justifyContent","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"sSAiBaA,EAAe,SAACC,GAAe,IAAD,EACbC,EAAYD,GADC,mBAClCE,EADkC,KACvBC,EADuB,KAKzC,QAAID,EAAYC,GAAWD,EAAYC,EAAS,KAGrCC,EAAgBJ,IAahBK,EAAO,SAACL,EAAWM,EAAQC,GACtC,IAAIC,EAAeR,EACnB,QAAIM,EAAS,GAAKA,EAAS,MACX,MAAVC,GAA2B,MAAVA,KAGvBC,EADYC,EAAOT,EAAWM,IACZA,GAAUC,EAErBC,KAOIE,EAAS,SAACV,GACrB,IAAK,IAAIW,EAAMX,EAAUY,OAAS,EAAGD,GAAO,EAAGA,IAC7C,IAAK,IAAIL,EAAS,EAAGA,EAAS,EAAGA,IAC/B,GAAIN,EAAUW,GAAKL,GAAS,CAC1B,GAAIA,GAAU,GAAsD,IAAjDO,EAAkBb,EAAUW,GAAML,GAAQ,GAAU,OAAO,EAC9E,GAAIK,GAAO,GAAKG,EAAed,EAAWW,EAAKL,GAAS,OAAO,EAKrE,OAAO,GAmBHL,EAAc,SAACD,GACnB,IAAIE,EAAY,EACZC,EAAS,EAYb,OAVAH,EAAUe,SAAQ,SAAAJ,GAChBA,EAAII,SAAQ,SAAAT,GACK,MAAXA,EACFJ,IACoB,MAAXI,GACTH,UAKC,CAACD,EAAWC,IAIfC,EAAkB,SAACJ,GACvB,IAAK,IAAIW,EAAMX,EAAUY,OAAS,EAAGD,GAAO,EAAGA,IAC7C,IAAK,IAAIL,EAAS,EAAGA,EAAS,EAAGA,IAC/B,GAAIN,EAAUW,GAAKL,KACZN,EAAUW,EAAM,GAAGL,GAAS,OAAO,EAK9C,OAAO,GAIHG,EAAS,SAACT,EAAWM,GAGzB,IAFA,IAAIK,EAAMX,EAAUY,OAAS,EAEtBD,GAAO,GAAG,CACf,IAAIX,EAAUW,GAAKL,GAGjB,OAAOK,EAFPA,MAQAE,EAAoB,SAACG,EAAQV,GAIjC,IAHA,IAAIW,EAAe,EACfC,EAAYZ,EAEPa,EAAIb,EAAQa,EAAIb,EAAS,GAC5BU,EAAOG,KAAOH,EAAOG,EAAI,GADMA,IAEjCF,IACAC,IAKJ,MAAO,CAACD,EAAcC,IAIlBE,EAAuB,SAACpB,EAAWW,EAAKL,EAAQe,GAIpD,IAHA,IAAIJ,EAAe,EACfC,EAAYZ,EAEPa,EAAIR,EAAKQ,EAAIR,EAAM,EAAGQ,IAC7B,OAAQE,GACN,IAAK,WACCrB,EAAUmB,GAAGb,KAAYN,EAAUmB,EAAI,GAAGb,GAC5CW,IAEAA,EAAe,EAEjB,MACF,IAAK,UACCX,GAAU,GAAKN,EAAUmB,GAAGD,KAAelB,EAAUmB,EAAI,GAAGD,EAAY,GAC1ED,IAEAA,EAAe,EAEjBC,IACA,MACF,IAAK,WACCZ,GAAU,GAAKN,EAAUmB,GAAGD,KAAelB,EAAUmB,EAAI,GAAGD,EAAY,GAC1ED,IAEAA,EAAe,EAEjBC,IAMN,MAAO,CAACD,EAAcC,IAIlBJ,EAAiB,SAACd,EAAWW,EAAKL,GACtC,OAAoE,IAAhEc,EAAqBpB,EAAWW,EAAKL,EAAQ,YAAY,KACM,IAA/Dc,EAAqBpB,EAAWW,EAAKL,EAAQ,WAAW,IACQ,IAAhEc,EAAqBpB,EAAWW,EAAKL,EAAQ,YAAY,KAKzDgB,EAAa,SAACtB,EAAWO,EAAOc,GACpC,IACIE,EADAC,EAAY,KAGdD,EADW,YAATF,EACqB,MAAVd,EAAgB,IAAM,IAEtBA,EAGf,IAAK,IAAII,EAAMX,EAAUY,OAAS,EAAGD,GAAO,EAAGA,IAC7C,IAAK,IAAIL,EAAS,EAAGA,EAAS,EAAGA,IAC/B,GAAIN,EAAUW,GAAKL,KAAYiB,EAAY,CAAC,IAAD,EACPV,EAAkBb,EAAUW,GAAML,GAD3B,mBAClCmB,EADkC,KACpBP,EADoB,KAEzC,GAAIA,GAAa,GAAKO,GAAgB,GAEpC,GADAC,QAAQC,IAAI,iBAAkBF,EAAc,OAAQd,EAAK,UAAWL,GAC/DN,EAAUW,GAAKO,EAAY,IAIzB,GAAIZ,EAAS,IAAMN,EAAUW,GAAKL,EAAS,GAAI,CAGpD,IADmBsB,EAAgB5B,EAAWW,EAD9Ca,EAAYlB,EAAS,GAEJ,OAAOkB,QAJxB,IADmBI,EAAgB5B,EAAWW,EAD9Ca,EAAYN,EAAY,GAER,OAAOM,OAMpB,GAAIb,GAAO,EAAG,CACnB,IAAMkB,EAA0BT,EAAqBpB,EAAWW,EAAKL,EAAQ,YAAY,GACzFoB,QAAQC,IAAI,6BAA8BE,EAAyB,OAAQlB,EAAK,UAAWL,GAFxE,MAGgCc,EAAqBpB,EAAWW,EAAKL,EAAQ,WAH7E,mBAGZwB,EAHY,KAGYC,EAHZ,KAInBL,QAAQC,IAAI,4BAA6BG,EAAwB,OAAQnB,EAAK,UAAWL,GACzF,IAAM0B,EAA0BZ,EAAqBpB,EAAWW,EAAKL,EAAQ,YAAY,GAEzF,GADAoB,QAAQC,IAAI,6BAA8BK,EAAyB,OAAQrB,EAAK,UAAWL,GACvFuB,GAA2B,EAE7B,OADAL,EAAYlB,EAEP,GAAIwB,GAA0B,GAAKnB,EAAIoB,EAAmB,IAG/D,IADmBH,EAAgB5B,EAAWW,EAD9Ca,EAAYO,EAAmB,GAEd,OAAOP,OACnB,GAAIQ,GAA2B,GAAKrB,EAAIL,EAAS,GAAI,CAG1D,IADmBsB,EAAgB5B,EAAWW,EAD9Ca,EAAYlB,EAAS,GAEJ,OAAOkB,IAOlC,OAAOA,GAIHI,EAAkB,SAAC5B,EAAWW,EAAKL,GAEvC,IAAI2B,GAAa,EACjB,GAAItB,EAAMX,EAAUY,OAAS,EAC3B,IAAK,IAAIO,EAAIR,EAAM,EAAGQ,EAAInB,EAAUY,OAAQO,IACrCnB,EAAUmB,GAAGb,KAAS2B,GAAa,GAI5C,OAAOA,G,gBCpPYC,E,YACnB,aAAe,IAAD,8BACZ,+CAEKC,MAAQ,CACXnC,UAAW,CACT,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACrC,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACrC,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACrC,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACrC,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACrC,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,OAEvCoC,KAAM,IACN1B,OAAQ,MAGV,EAAK2B,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAlBN,E,2EAqBC,IAAD,OAENG,EADgBC,KAAKP,MAAnBnC,UACoB2C,KAAI,SAAAhC,GAC9B,IAAMiC,EAAUjC,EAAIgC,KAAI,SAAArC,GACtB,IAAIuC,EAAQ,GAOZ,MANe,MAAXvC,EACFuC,EAAQC,EAAOC,aACK,MAAXzC,IACTuC,EAAQC,EAAOE,WAIf,wBAAIH,MAAOC,EAAOG,MAChB,yBAAKJ,MAAOA,QAKlB,OACE,4BAAKD,MAIHM,EAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGP,KAAI,SAAAQ,GAAM,OAChD,wBAAIN,MAAOC,EAAOG,MAChB,4BACEG,IAAKD,EACLN,MAAOC,EAAOO,WACdC,QAAS,EAAKjB,YACdkB,MAAOJ,QAKb,OACE,2BAAOK,OAAO,KACXf,EACD,4BAAKS,M,iCAKAO,GACT,IAAMrB,EAAOqB,EAAEC,OAAOH,MACtBb,KAAKiB,SAAS,CAAEvB,W,kCAGNqB,GAAI,IAAD,OACPG,EAAOH,EAAEC,OAAOH,MADT,EAEuBb,KAAKP,MAAjCnC,EAFK,EAELA,UAAWU,EAFN,EAEMA,OAAQ0B,EAFd,EAEcA,KAC3B,IAAK1B,EAAQ,CACX,IAAMH,EDxEoB,SAACP,GAAe,IAAD,EACjBC,EAAYD,GADK,mBAI7C,OAJ6C,UAGX,IAAM,ICqEtB6D,CAAoB7D,GAE5BQ,EAAeqD,EAAQ7D,EAAW4D,EAAMrD,GAC1CsD,EAAgBrD,GAClBkC,KAAKiB,SAAS,CACZ3D,UAAWQ,IACV,WACD,IAAIE,EAASmD,EAAUrD,GACnBE,GACFA,EAAmB,MAAVH,EAAgB,SAAW,MACpC,EAAKoD,SAAS,CAAEjD,YACE,MAAT0B,GACT,EAAK0B,kBAITpC,QAAQqC,MAAM,yB,uCAclBrB,KAAKiB,SAAS,CACZ3D,UATmB,CACnB,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACrC,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACrC,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACrC,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACrC,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACrC,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,OAIrCU,OAAQ,S,qCAII,IAAD,OACLV,EAAc0C,KAAKP,MAAnBnC,UAEF4D,ED7CoB,SAAC5D,EAAWO,GACxC,IAAMyD,EAAc1C,EAAWtB,EAAWO,EAAO,WACjD,GAAoB,OAAhByD,EAAsB,OAAOA,EAEjC,IAAMC,EAAc3C,EAAWtB,EAAWO,GAC1C,OAAO0D,GAA4BC,KAAKC,MAAsB,EAAhBD,KAAKE,UCwCpCP,CAAkB7D,EADjB,KAERQ,EAAeqD,EAAQ7D,EAAW4D,EAF1B,KAGVC,EAAgBrD,GAClBkC,KAAKiB,SAAS,CACZ3D,UAAWQ,IACV,WACD,IAAIE,EAASmD,EAAUrD,GACnBE,IACFA,EAAoC,MACpC,EAAKiD,SAAS,CAAEjD,eAIpBgB,QAAQqC,MAAM,wB,+BAIR,IACArD,EAAWgC,KAAKP,MAAhBzB,OACF2D,EAA8B,MAApB3B,KAAKP,MAAMC,KAAeU,EAAOwB,aAAexB,EAAOK,OACjEoB,EAA8B,MAApB7B,KAAKP,MAAMC,KAAeU,EAAOwB,aAAexB,EAAOK,OAEvE,OACE,yBAAKqB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,OAAOC,MAAM,UACrDlE,GAAU,4BAAKA,EAAL,UACX,yBAAKmC,MAAOC,EAAO+B,eACjB,4BAAQhC,MAAOwB,EAASf,QAASZ,KAAKF,WAAYe,MAAM,KAAxD,YACA,4BAAQV,MAAO0B,EAASjB,QAASZ,KAAKF,WAAYe,MAAM,KAAxD,cAEDb,KAAKoC,cACN,4BAAQjC,MAAOC,EAAOK,OAAQG,QAASZ,KAAKH,gBAA5C,iB,GAhJwBwC,aAuJ5BjC,EAAS,CACbC,aAAc,CACZiC,aAAc,OACdC,gBAAiB,SACjBL,MAAO,OACPM,OAAQ,OACRC,OAAQ,QAEVnC,UAAW,CACTgC,aAAc,OACdC,gBAAiB,MACjBL,MAAO,OACPM,OAAQ,OACRC,OAAQ,QAEVlC,KAAM,CACJ2B,MAAO,OACPM,OAAQ,QAEV7B,WAAY,CACVuB,MAAO,OACPM,OAAQ,QAEV/B,OAAQ,CACNyB,MAAO,QACPM,OAAQ,OACRC,OAAQ,OACRC,OAAQ,WAEVd,aAAc,CACZM,MAAO,QACPM,OAAQ,OACRC,OAAQ,OACRC,OAAQ,UACRH,gBAAiB,QAEnBJ,cAAe,CACbQ,QAAS,OACTC,eAAgB,a,MCvLLC,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxC,GACLrC,QAAQqC,MAAMA,EAAMyC,a,kBEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.b753bad8.chunk.js","sourcesContent":["/**\n  * @param gameState state of the game represented as a two dimensional array\n  * @return color represented by a string\n*/\n\nexport const getCurrentPlayer = (gameState) => {\n  const [numYellow, numRed] = countColors(gameState);\n\n  const turn = numYellow > numRed ? 'r' : 'y';\n  return turn;\n}\n\n\n/**\n  * @param gameState state of the game represented as a two dimensional array\n  * @return valid game state represented by boolean\n*/\nexport const isStateValid = (gameState) => {\n  const [numYellow, numRed] = countColors(gameState);\n\n  // anomalies include:\n  // players who have exceeded their turn\n  if (numYellow < numRed || (numYellow - numRed > 1)) {\n    return false;\n  // slots filled where there are empty slots below\n  } else if (checkEmptySlots(gameState)) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n  * @param gameState state of the game represented as a two dimensional array\n  * @param column column represented as a number\n  * @param color color represented by a string\n  * @return new state of the game represented as a two dimensional array\n*/\nexport const play = (gameState, column, color) => {\n  let newGameState = gameState;\n  if (column < 0 || column > 6) return false;\n  if (!(color === 'y' || color === 'r')) return false;\n\n  const row = getRow(gameState, column);\n  newGameState[row][column] = color;\n  \n  return newGameState;\n}\n\n/**\n  * @param gameState state of the game represented as a two dimensional array\n  * @return winner exists represented by boolean\n*/\nexport const winner = (gameState) => {\n  for (let row = gameState.length - 1; row >= 0; row--) {\n    for (let column = 0; column < 7; column++) {\n      if (gameState[row][column]) {\n        if (column <= 3 && countConnectedRow(gameState[row], column)[0] === 4) return true;\n        if (row >= 3 && checkColumnWin(gameState, row, column)) return true;\n      }\n    }\n  }\n  \n  return false;\n}\n\n/**\n  * @param gameState state of the game represented as a two dimensional array\n  * @param color color represented by a string\n  * @return column represented as a number\n*/\nexport const figureNextMove = (gameState, color) => {\n  const defenseMove = checkMoves(gameState, color, 'defense');\n  if (defenseMove !== null) return defenseMove;\n\n  const offenseMove = checkMoves(gameState, color);\n  return offenseMove ? offenseMove : Math.floor(Math.random() * 6);\n}\n\n// Helper methods\n\n// counts number of yellow and red moves\nconst countColors = (gameState) => {\n  let numYellow = 0;\n  let numRed = 0;\n\n  gameState.forEach(row => {\n    row.forEach(column => {\n      if (column === 'y') {\n        numYellow++;\n      } else if (column === 'r') {\n        numRed++;\n      }\n    });\n  });\n\n  return [numYellow, numRed];\n}\n\n// checks if there are empty slots below existing moves\nconst checkEmptySlots = (gameState) => {\n  for (let row = gameState.length - 2; row >= 0; row--) {\n    for (let column = 0; column < 7; column++) {\n      if (gameState[row][column]) {\n        if (!gameState[row + 1][column]) return true;\n      }\n    }\n  }\n\n  return false;\n}\n\n// gets next row based on current column\nconst getRow = (gameState, column) => {\n  let row = gameState.length - 1;\n\n  while (row >= 0) {\n    if (gameState[row][column]) {\n      row--;\n    } else {\n      return row;\n    }\n  }\n}\n\n// counts number of connected moves within a row\nconst countConnectedRow = (rowArr, column) => {\n  let numConnected = 1;\n  let endColumn = column;\n\n  for (let i = column; i < column + 3; i++) {\n    if (rowArr[i] === rowArr[i + 1]) {\n      numConnected++;\n      endColumn++;\n    } else {\n      break;\n    }\n  }\n  return [numConnected, endColumn];\n}\n\n// counts number of connected moves within a column (straight, diagonal forward, diagonal backwards)\nconst countConnectedColumn = (gameState, row, column, type) => {\n  let numConnected = 1;\n  let endColumn = column;\n\n  for (let i = row; i > row - 3; i--) {\n    switch (type) {\n      case 'straight':\n        if (gameState[i][column] === gameState[i - 1][column]) {\n          numConnected++;\n        } else {\n          numConnected = 1;\n        }\n        break;\n      case 'forward':\n        if (column <= 3 && gameState[i][endColumn] === gameState[i - 1][endColumn + 1]) {\n          numConnected++;\n        } else {\n          numConnected = 1;\n        }\n        endColumn++;\n        break;\n      case 'backward':\n        if (column >= 3 && gameState[i][endColumn] === gameState[i - 1][endColumn - 1]) {\n          numConnected++;\n        } else {\n          numConnected = 1;\n        }\n        endColumn--;\n        break;\n      default:\n        break;\n    }\n  }\n  return [numConnected, endColumn];\n}\n\n// checks for wins from vertical connections\nconst checkColumnWin = (gameState, row, column) => {\n  if (countConnectedColumn(gameState, row, column, 'straight')[0] === 4) return true;\n  if (countConnectedColumn(gameState, row, column, 'forward')[0] === 4) return true;\n  if (countConnectedColumn(gameState, row, column, 'backward')[0] === 4) return true;\n  return false;\n}\n\n// looks for moves based on defense or offense\nconst checkMoves = (gameState, color, type) => {\n  let columnRec = null;\n  let checkColor;\n  if (type === 'defense') {\n    checkColor = color === 'y' ? 'r' : 'y';\n  } else {\n    checkColor = color;\n  }\n\n  for (let row = gameState.length - 1; row >= 0; row--) {\n    for (let column = 0; column < 7; column++) {\n      if (gameState[row][column] === checkColor) {\n        const [connectedRow, endColumn] = countConnectedRow(gameState[row], column);\n        if (endColumn <= 5 && connectedRow >= 2) {\n          console.log('connected row:', connectedRow, 'row:', row, 'column:', column);\n          if (!gameState[row][endColumn + 1]) {\n            columnRec = endColumn + 1;\n            const emptyBelow = checkEmptyBelow(gameState, row, columnRec);\n            if(!emptyBelow) return columnRec;\n          } else if (column > 0 && !gameState[row][column - 1]) {\n            columnRec = column - 1;\n            const emptyBelow = checkEmptyBelow(gameState, row, columnRec);\n            if (!emptyBelow) return columnRec;\n          }\n        } else if (row >= 3) {\n          const connectedColumnStraight = countConnectedColumn(gameState, row, column, 'straight')[0];\n          console.log('connected column straight:', connectedColumnStraight, 'row:', row, 'column:', column);\n          const [connectedColumnForward, endColumnForward] = countConnectedColumn(gameState, row, column, 'forward');\n          console.log('connected column forward:', connectedColumnForward, 'row:', row, 'column:', column);\n          const connectedColumnBackward = countConnectedColumn(gameState, row, column, 'backward')[0];\n          console.log('connected column backward:', connectedColumnBackward, 'row:', row, 'column:', column);\n          if (connectedColumnStraight >= 3) {\n            columnRec = column;\n            return columnRec;\n          } else if (connectedColumnForward >= 3 && row[endColumnForward + 1]) {\n            columnRec = endColumnForward + 1;\n            const emptyBelow = checkEmptyBelow(gameState, row, columnRec);\n            if (!emptyBelow) return columnRec;\n          } else if (connectedColumnBackward >= 3 && row[column - 1]) {\n            columnRec = column - 1;\n            const emptyBelow = checkEmptyBelow(gameState, row, columnRec);\n            if (!emptyBelow) return columnRec;\n          }\n        }\n      }\n    }\n  }\n  \n  return columnRec;\n}\n\n// checks for empty rows\nconst checkEmptyBelow = (gameState, row, column) => {\n  debugger;\n  let emptyBelow = false;\n  if (row < gameState.length - 1) {\n    for (let i = row + 1; i < gameState.length; i++) {\n      if (!gameState[i][column]) emptyBelow = true;\n    }\n  }\n\n  return emptyBelow;\n}\n\n// Bonus\n// const checkSquareWin = (gameState, row, column) => {\n//   const color = gameState[row][column];\n//   const secondMove = gameState[row][column + 1] === color;\n//   const thirdMove = gameState[row - 1][column] === color;\n//   const fourthMove = gameState[row - 1][column + 1] === color;\n\n//   return (secondMove && thirdMove && fourthMove);\n// }\n\n// const checkL0Win = (gameState, row, column) => {\n//   const color = gameState[row][column];\n//   const secondMove = gameState[row][column + 1] === color;\n//   const thirdMove = gameState[row - 1][column] === color;\n//   const fourthMove = gameState[row - 2][column] === color;\n\n//   return (secondMove && thirdMove && fourthMove);\n// }\n\n// const checkL90Win = (gameState, row, column) => {\n//   const color = gameState[row][column];\n//   const secondMove = gameState[row][column + 1] === color;\n//   const thirdMove = gameState[row][column + 2][column] === color;\n//   const fourthMove = gameState[row - 1][column + 2] === color;\n\n//   return (secondMove && thirdMove && fourthMove);\n// }\n\n// const checkL180Win = (gameState, row, column) => {\n//   const color = gameState[row][column];\n//   const secondMove = gameState[row - 1][column] === color;\n//   const thirdMove = gameState[row - 2][column] === color;\n//   const fourthMove = gameState[row - 2][column - 1] === color;\n\n//   return (secondMove && thirdMove && fourthMove);\n// }\n\n// const checkL270Win = (gameState, row, column) => {\n//   const color = gameState[row][column];\n//   const secondMove = gameState[row - 1][column] === color;\n//   const thirdMove = gameState[row - 1][column + 1] === color;\n//   const fourthMove = gameState[row - 1][column + 2] === color;\n\n//   return (secondMove && thirdMove && fourthMove);\n// }\n\n// const winConfig = {\n//   'square': checkSquareWin,\n//   'L0': checkL0Win,\n//   'L90': checkL90Win,\n//   'L180': checkL180Win,\n//   'L270': checkL270Win,\n// };\n\n// const checkBonusWin = (gameState, type) => {\n//   for (let row = gameState.length - 1; row < 0; row--) {\n//     for (let column = 0; column < row.length; column++) {\n//       if (gameState[row][column]) {\n//         if (winConfig[type](gameState, row, column)) return true;\n//       }\n//     }\n//   }\n\n//   return false;\n// }\n\n// Test\n// const testGameState = [\n  // [null, null, null, null, null, null, null],\n  // [null, null, null, 'r', null, null, null],\n  // ['r', null, null, 'r', null, null, null],\n  // ['y', null, 'r', 'y', null, null, null],\n  // ['r', 'y', 'y', 'r', 'y', null, null],\n  // ['r', 'y', 'y', 'y', 'r', null, null],\n// ];\n\n// const currentPlayer = getCurrentPlayer(testGameState);\n// console.log('current player:', currentPlayer);\n// console.log('valid state:', isStateValid(testGameState));\n// console.log('new game state:', play(testGameState, 0, currentPlayer));\n// console.log('winner exists:', winner(testGameState));\n// console.log('next move:', figureNextMove(testGameState, currentPlayer));\n","import React, { Component } from 'react';\nimport * as cf from './connectFour';\nimport logo from './logo.svg';\n\nexport default class Game extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      gameState: [\n        [null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null],\n      ],\n      mode: '1',\n      winner: null,\n    };\n\n    this.onClickMove = this.onClickMove.bind(this);\n    this.onClickRestart = this.onClickRestart.bind(this);\n    this.toggleMode = this.toggleMode.bind(this);\n  }\n\n  renderTable() {\n    const { gameState } = this.state;\n    const tableRows = gameState.map(row => {\n      const columns = row.map(column => {\n        let style = {};\n        if (column === 'y') {\n          style = styles.yellowPlayer;\n        } else if (column === 'r') {\n          style = styles.redPlayer;\n        }\n\n        return (\n          <td style={styles.cell}>\n            <div style={style}></div>\n          </td>\n        );\n      });\n\n      return (\n        <tr>{columns}</tr>\n      );\n    });\n\n    const buttonRow = [0, 1, 2, 3, 4, 5, 6].map(button => \n      <td style={styles.cell}>\n        <button\n          key={button}\n          style={styles.moveButton}\n          onClick={this.onClickMove}\n          value={button}\n        ></button>\n      </td>\n    );\n\n    return (\n      <table border=\"1\">\n        {tableRows}\n        <tr>{buttonRow}</tr>\n      </table>\n    );\n  }\n\n  toggleMode(e) {\n    const mode = e.target.value;\n    this.setState({ mode });\n  }\n\n  onClickMove(e) {\n    const move = e.target.value;\n    const { gameState, winner, mode } = this.state;\n    if (!winner) {\n      const color = cf.getCurrentPlayer(gameState);\n\n      const newGameState = cf.play(gameState, move, color);\n      if (cf.isStateValid(newGameState)) {\n        this.setState({\n          gameState: newGameState,\n        }, () => {\n          let winner = cf.winner(newGameState);\n          if (winner) {\n            winner = color === 'y' ? 'yellow' : 'red';\n            this.setState({ winner });\n          } else if (mode === '1') {\n            this.computerMove();\n          }\n        });\n      } else {\n        console.error('invalid game state');\n      }\n    }\n  }\n\n  onClickRestart() {\n    const newGameState = [\n      [null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null],\n    ];\n    this.setState({\n      gameState: newGameState,\n      winner: null,\n    });\n  }\n\n  computerMove() {\n    const { gameState } = this.state;\n    const color = 'r';\n    const move = cf.figureNextMove(gameState, color);\n    const newGameState = cf.play(gameState, move, color);\n    if (cf.isStateValid(newGameState)) {\n      this.setState({\n        gameState: newGameState,\n      }, () => {\n        let winner = cf.winner(newGameState);\n        if (winner) {\n          winner = color === 'y' ? 'yellow' : 'red';\n          this.setState({ winner });\n        }\n      });\n    } else {\n      console.error('invalid game state');\n    }\n  }\n\n  render() {\n    const { winner } = this.state;\n    const button1 = this.state.mode === '1' ? styles.activeButton : styles.button;\n    const button2 = this.state.mode === '2' ? styles.activeButton : styles.button;\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" width=\"100px\" />\n          {winner && <h1>{winner} wins!</h1>}\n          <div style={styles.modeContainer}>\n            <button style={button1} onClick={this.toggleMode} value=\"1\">1 Player</button>\n            <button style={button2} onClick={this.toggleMode} value=\"2\">2 Players</button>\n          </div>\n          {this.renderTable()}\n          <button style={styles.button} onClick={this.onClickRestart}>Restart</button>\n        </header>\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  yellowPlayer: {\n    borderRadius: '25px',\n    backgroundColor: 'yellow',\n    width: '40px',\n    height: '40px',\n    margin: 'auto',\n  },\n  redPlayer: {\n    borderRadius: '25px',\n    backgroundColor: 'red',\n    width: '40px',\n    height: '40px',\n    margin: 'auto',\n  },\n  cell: {\n    width: '50px',\n    height: '50px',\n  },\n  moveButton: {\n    width: '40px',\n    height: '40px',\n  },\n  button: {\n    width: '120px',\n    height: '40px',\n    margin: '10px',\n    cursor: 'pointer',\n  },\n  activeButton: {\n    width: '120px',\n    height: '40px',\n    margin: '10px',\n    cursor: 'pointer',\n    backgroundColor: 'grey',\n  },\n  modeContainer: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n  }\n};\n","import React from 'react';\nimport Game from './gameComponent';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}