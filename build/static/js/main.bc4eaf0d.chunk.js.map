{"version":3,"sources":["modules/Game/utils/index.js","modules/Game/connectFour.js","modules/Game/components/gameComponent.js","modules/App/App.js","serviceWorker.js","index.js","assets/logo.svg"],"names":["countColors","gameState","numYellow","numRed","forEach","row","column","getRow","length","countConnectedRow","rowArr","numConnected","endColumn","i","countConnectedColumn","type","loop","checkColumnWin","checkMoves","color","checkColor","columnRec","checkMovesRow","columnRecStraight","checkMovesColumnStraight","columnRecForward","checkMovesColumnForward","columnRecBackward","checkMovesColumnBackward","connectedRow","log","checkEmptyBelow","connectedColumnStraight","undefined","connectedColumnForward","endColumnForward","columnRecRight","checkRowRight","emptyBelowRight","columnRecLeft","checkRowLeft","emptyBelowLeft","connectedColumnBackward","endColumnBackward","emptyBelow","console","isStateValid","checkEmptySlots","play","newGameState","winner","nextMove","counter","offenseMove","defenseMove","Game","state","mode","onClickMove","bind","onClickRestart","toggleMode","tableRows","this","map","rowIndex","columns","columnIndex","style","styles","yellowPlayer","redPlayer","key","cell","buttonRow","button","moveButton","onClick","value","border","e","target","setState","move","cf","computerMove","error","Math","floor","random","button1","activeButton","button2","className","src","logo","alt","width","modeContainer","renderTable","Component","borderRadius","backgroundColor","height","margin","cursor","display","justifyContent","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.bc4eaf0d.chunk.js","sourcesContent":["// Helper methods\n\n// counts number of yellow and red moves\nconst countColors = gameState => {\n  let numYellow = 0;\n  let numRed = 0;\n\n  gameState.forEach(row => {\n    row.forEach(column => {\n      if (column === \"y\") {\n        numYellow++;\n      } else if (column === \"r\") {\n        numRed++;\n      }\n    });\n  });\n  return [numYellow, numRed];\n};\n\n// checks if there are empty slots below existing moves\nconst checkEmptySlots = gameState => {\n  for (let row = gameState.length - 2; row >= 0; row--) {\n    for (let column = 0; column < 7; column++) {\n      if (gameState[row][column]) {\n        if (!gameState[row + 1][column]) return true;\n      }\n    }\n  }\n  return false;\n};\n\n// gets next row based on current column\nconst getRow = (gameState, column) => {\n  let row = gameState.length - 1;\n\n  while (row >= 0) {\n    if (gameState[row][column]) {\n      row--;\n    } else {\n      return row;\n    }\n  }\n};\n\n// counts number of connected moves within a row\nconst countConnectedRow = (rowArr, column) => {\n  let numConnected = 1;\n  let endColumn = column;\n\n  for (let i = column; i < column + 3; i++) {\n    if (rowArr[i] === rowArr[i + 1]) {\n      numConnected++;\n      endColumn++;\n    } else {\n      break;\n    }\n  }\n  return [numConnected, endColumn];\n};\n\n// counts number of connected moves within a column (straight, diagonal forward, diagonal backwards)\nconst countConnectedColumn = (gameState, row, column, type) => {\n  let numConnected = 1;\n  let endColumn = column;\n\n  loop: for (let i = row; i > row - 3; i--) {\n    switch (type) {\n      case \"straight\":\n        if (gameState[i][column] === gameState[i - 1][column]) {\n          numConnected++;\n        } else {\n          break loop;\n        }\n        break;\n      case \"forward\":\n        if (\n          column <= 3 &&\n          gameState[i][endColumn] === gameState[i - 1][endColumn + 1]\n        ) {\n          numConnected++;\n        } else {\n          break loop;\n        }\n        endColumn++;\n        break;\n      case \"backward\":\n        if (\n          column >= 3 &&\n          gameState[i][endColumn] === gameState[i - 1][endColumn - 1]\n        ) {\n          numConnected++;\n        } else {\n          break loop;\n        }\n        endColumn--;\n        break;\n      default:\n        break;\n    }\n  }\n  return [numConnected, endColumn];\n};\n\n// checks for wins from vertical connections\nconst checkColumnWin = (gameState, row, column) => {\n  if (countConnectedColumn(gameState, row, column, \"straight\")[0] === 4)\n    return true;\n  if (countConnectedColumn(gameState, row, column, \"forward\")[0] === 4)\n    return true;\n  if (countConnectedColumn(gameState, row, column, \"backward\")[0] === 4)\n    return true;\n  return false;\n};\n\n// looks for moves based on defense or offense\nconst checkMoves = (gameState, color, numConnected, type) => {\n  let checkColor;\n  if (type === \"defense\") {\n    checkColor = color === \"y\" ? \"r\" : \"y\";\n  } else {\n    checkColor = color;\n  }\n\n  for (let row = gameState.length - 1; row >= 0; row--) {\n    for (let column = 0; column < 7; column++) {\n      if (gameState[row][column] === checkColor) {\n        const columnRec = checkMovesRow(gameState, row, column, numConnected);\n        if (columnRec !== null) return columnRec;\n\n        if (row >= 3) {\n          const columnRecStraight = checkMovesColumnStraight(\n            gameState,\n            row,\n            column,\n            numConnected\n          );\n          if (columnRecStraight !== null) return columnRecStraight;\n\n          const columnRecForward = checkMovesColumnForward(\n            gameState,\n            row,\n            column,\n            numConnected\n          );\n          if (columnRecForward !== null) return columnRecForward;\n\n          const columnRecBackward = checkMovesColumnBackward(\n            gameState,\n            row,\n            column,\n            numConnected\n          );\n          if (columnRecBackward !== null) return columnRecBackward;\n        }\n      }\n    }\n  }\n  return null;\n};\n\nconst checkMovesRow = (gameState, row, column, numConnected) => {\n  const [connectedRow, endColumn] = countConnectedRow(gameState[row], column);\n  if (endColumn <= 5 && connectedRow >= numConnected) {\n    log(\"row\", connectedRow, row, column);\n    if (gameState[row][endColumn + 1] === null) {\n      const columnRec = endColumn + 1;\n      const emptyBelow = checkEmptyBelow(gameState, row, columnRec);\n      if (!emptyBelow) return columnRec;\n    }\n    if (column > 0 && gameState[row][column - 1] === null) {\n      const columnRec = column - 1;\n      const emptyBelow = checkEmptyBelow(gameState, row, columnRec);\n      if (!emptyBelow) return columnRec;\n    }\n  }\n  return null;\n};\n\nconst checkMovesColumnStraight = (gameState, row, column, numConnected) => {\n  const connectedColumnStraight = countConnectedColumn(\n    gameState,\n    row,\n    column,\n    \"straight\"\n  )[0];\n  log(\"column straight\", connectedColumnStraight, row, column);\n  if (\n    connectedColumnStraight >= numConnected &&\n    gameState[row - numConnected][column] === null &&\n    getRow(gameState, column) !== undefined\n  ) {\n    return column;\n  }\n  return null;\n};\n\nconst checkMovesColumnForward = (gameState, row, column, numConnected) => {\n  const [connectedColumnForward, endColumnForward] = countConnectedColumn(\n    gameState,\n    row,\n    column,\n    \"forward\"\n  );\n  log(\"column forward\", connectedColumnForward, row, column);\n  const columnRecRight = endColumnForward + 1;\n  const checkRowRight = row - numConnected;\n  const emptyBelowRight = checkEmptyBelow(\n    gameState,\n    checkRowRight,\n    columnRecRight\n  );\n  if (\n    connectedColumnForward >= numConnected &&\n    gameState[checkRowRight][columnRecRight] === null &&\n    getRow(gameState, column) !== undefined &&\n    !emptyBelowRight\n  )\n    return columnRecRight;\n\n  if (row > 0 && column > 0) {\n    const columnRecLeft = column - 1;\n    const checkRowLeft = row - 1;\n    const emptyBelowLeft = checkEmptyBelow(\n      gameState,\n      checkRowLeft,\n      columnRecLeft\n    );\n    if (gameState[checkRowLeft][columnRecLeft] === null && !emptyBelowLeft)\n      return columnRecLeft;\n  }\n\n  return null;\n};\n\nconst checkMovesColumnBackward = (gameState, row, column, numConnected) => {\n  const [connectedColumnBackward, endColumnBackward] = countConnectedColumn(\n    gameState,\n    row,\n    column,\n    \"backward\"\n  );\n  log(\"column backward\", connectedColumnBackward, row, column);\n  const columnRecRight = endColumnBackward - 1;\n  const checkRowRight = row - numConnected;\n  const emptyBelow = checkEmptyBelow(gameState, checkRowRight, columnRecRight);\n  debugger;\n  if (\n    connectedColumnBackward >= numConnected &&\n    gameState[checkRowRight][columnRecRight] === null &&\n    getRow(gameState, column) !== undefined &&\n    !emptyBelow\n  )\n    return columnRecRight;\n\n  if (row < 5 && column < 6) {\n    const columnRecLeft = column + 1;\n    const checkRowLeft = row + 1;\n    const emptyBelowLeft = checkEmptyBelow(\n      gameState,\n      checkRowLeft,\n      columnRecLeft\n    );\n    if (gameState[checkRowLeft][columnRecLeft] === null && !emptyBelowLeft)\n      return columnRecLeft;\n  }\n\n  return null;\n};\n\n// checks for empty rows\nconst checkEmptyBelow = (gameState, row, column) => {\n  let emptyBelow = false;\n  if (row < gameState.length - 1) {\n    for (let i = row + 1; i < gameState.length; i++) {\n      if (!gameState[i][column]) emptyBelow = true;\n    }\n  }\n  return emptyBelow;\n};\n\n// log for testing\nconst log = (type, numConnected, row, column) => {\n  console.log(\n    `connected ${type}: ${numConnected} row: ${row} column ${column}`\n  );\n};\n\nexport {\n  countColors,\n  checkEmptySlots,\n  getRow,\n  countConnectedRow,\n  checkColumnWin,\n  checkMoves\n};\n","import {\n  countColors,\n  checkEmptySlots,\n  getRow,\n  countConnectedRow,\n  checkColumnWin,\n  checkMoves\n} from \"./utils\";\n\n/**\n * @param gameState state of the game represented as a two dimensional array\n * @return color represented by a string\n */\n\nexport const getCurrentPlayer = gameState => {\n  const [numYellow, numRed] = countColors(gameState);\n\n  const turn = numYellow > numRed ? \"r\" : \"y\";\n  return turn;\n};\n\n/**\n * @param gameState state of the game represented as a two dimensional array\n * @return valid game state represented by boolean\n */\nexport const isStateValid = gameState => {\n  if (!gameState) return false;\n  const [numYellow, numRed] = countColors(gameState);\n\n  // anomalies include:\n  // players who have exceeded their turn\n  if (numYellow < numRed || numYellow - numRed > 1) {\n    return false;\n    // slots filled where there are empty slots below\n  } else if (checkEmptySlots(gameState)) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * @param gameState state of the game represented as a two dimensional array\n * @param column column represented as a number\n * @param color color represented by a string\n * @return new state of the game represented as a two dimensional array\n */\nexport const play = (gameState, column, color) => {\n  let newGameState = gameState;\n  if (column < 0 || column > 6) return false;\n  if (!(color === \"y\" || color === \"r\")) return false;\n\n  const row = getRow(gameState, column);\n  if (row === undefined) return false;\n  newGameState[row][column] = color;\n\n  return newGameState;\n};\n\n/**\n * @param gameState state of the game represented as a two dimensional array\n * @return winner exists represented by boolean\n */\nexport const winner = gameState => {\n  for (let row = gameState.length - 1; row >= 0; row--) {\n    for (let column = 0; column < 7; column++) {\n      if (gameState[row][column]) {\n        if (column <= 3 && countConnectedRow(gameState[row], column)[0] === 4)\n          return true;\n        if (row >= 3 && checkColumnWin(gameState, row, column)) return true;\n      }\n    }\n  }\n\n  return false;\n};\n\n/**\n * @param gameState state of the game represented as a two dimensional array\n * @param color color represented by a string\n * @return column represented as a number\n */\nexport const figureNextMove = (gameState, color) => {\n  const move = nextMove(gameState, color, 3);\n\n  return move !== null ? move : Math.floor(Math.random() * 6);\n};\n\nconst nextMove = (gameState, color, numConnected) => {\n  let counter = numConnected;\n  while (counter > 0) {\n    const offenseMove = checkMoves(gameState, color, counter);\n    if (offenseMove !== null) return offenseMove;\n    const defenseMove = checkMoves(gameState, color, counter, \"defense\");\n    if (defenseMove !== null) return defenseMove;\n    counter--;\n  }\n  return null;\n};\n\n// Bonus\n// const checkSquareWin = (gameState, row, column) => {\n//   const color = gameState[row][column];\n//   const secondMove = gameState[row][column + 1] === color;\n//   const thirdMove = gameState[row - 1][column] === color;\n//   const fourthMove = gameState[row - 1][column + 1] === color;\n\n//   return (secondMove && thirdMove && fourthMove);\n// }\n\n// const checkL0Win = (gameState, row, column) => {\n//   const color = gameState[row][column];\n//   const secondMove = gameState[row][column + 1] === color;\n//   const thirdMove = gameState[row - 1][column] === color;\n//   const fourthMove = gameState[row - 2][column] === color;\n\n//   return (secondMove && thirdMove && fourthMove);\n// }\n\n// const checkL90Win = (gameState, row, column) => {\n//   const color = gameState[row][column];\n//   const secondMove = gameState[row][column + 1] === color;\n//   const thirdMove = gameState[row][column + 2][column] === color;\n//   const fourthMove = gameState[row - 1][column + 2] === color;\n\n//   return (secondMove && thirdMove && fourthMove);\n// }\n\n// const checkL180Win = (gameState, row, column) => {\n//   const color = gameState[row][column];\n//   const secondMove = gameState[row - 1][column] === color;\n//   const thirdMove = gameState[row - 2][column] === color;\n//   const fourthMove = gameState[row - 2][column - 1] === color;\n\n//   return (secondMove && thirdMove && fourthMove);\n// }\n\n// const checkL270Win = (gameState, row, column) => {\n//   const color = gameState[row][column];\n//   const secondMove = gameState[row - 1][column] === color;\n//   const thirdMove = gameState[row - 1][column + 1] === color;\n//   const fourthMove = gameState[row - 1][column + 2] === color;\n\n//   return (secondMove && thirdMove && fourthMove);\n// }\n\n// const winConfig = {\n//   'square': checkSquareWin,\n//   'L0': checkL0Win,\n//   'L90': checkL90Win,\n//   'L180': checkL180Win,\n//   'L270': checkL270Win,\n// };\n\n// const checkBonusWin = (gameState, type) => {\n//   for (let row = gameState.length - 1; row < 0; row--) {\n//     for (let column = 0; column < row.length; column++) {\n//       if (gameState[row][column]) {\n//         if (winConfig[type](gameState, row, column)) return true;\n//       }\n//     }\n//   }\n\n//   return false;\n// }\n","import React, { Component } from \"react\";\nimport * as cf from \"../connectFour\";\nimport logo from \"../../../assets/logo.svg\";\n\nexport default class Game extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      gameState: [\n        [null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null]\n      ],\n      mode: \"1\",\n      winner: null\n    };\n\n    this.onClickMove = this.onClickMove.bind(this);\n    this.onClickRestart = this.onClickRestart.bind(this);\n    this.toggleMode = this.toggleMode.bind(this);\n  }\n\n  renderTable() {\n    const { gameState } = this.state;\n    const tableRows = gameState.map((row, rowIndex) => {\n      const columns = row.map((column, columnIndex) => {\n        let style = {};\n        if (column === \"y\") {\n          style = styles.yellowPlayer;\n        } else if (column === \"r\") {\n          style = styles.redPlayer;\n        }\n\n        return (\n          <td key={columnIndex} style={styles.cell}>\n            <div style={style}></div>\n          </td>\n        );\n      });\n\n      return <tr key={rowIndex}>{columns}</tr>;\n    });\n\n    const buttonRow = [0, 1, 2, 3, 4, 5, 6].map(button => (\n      <td key={button} style={styles.cell}>\n        <button\n          style={styles.moveButton}\n          onClick={this.onClickMove}\n          value={button}\n        ></button>\n      </td>\n    ));\n\n    return (\n      <table border=\"1\">\n        {tableRows}\n        <tr>{buttonRow}</tr>\n      </table>\n    );\n  }\n\n  toggleMode(e) {\n    const mode = e.target.value;\n    this.setState({ mode });\n  }\n\n  onClickMove(e) {\n    const move = e.target.value;\n    const { gameState, winner, mode } = this.state;\n    if (!winner) {\n      const color = cf.getCurrentPlayer(gameState);\n\n      const newGameState = cf.play(gameState, move, color);\n      if (cf.isStateValid(newGameState)) {\n        this.setState(\n          {\n            gameState: newGameState\n          },\n          () => {\n            let winner = cf.winner(newGameState);\n            if (winner) {\n              winner = color === \"y\" ? \"yellow\" : \"red\";\n              this.setState({ winner });\n            } else if (mode === \"1\") {\n              this.computerMove();\n            }\n          }\n        );\n      } else {\n        console.error(\"invalid game state\");\n      }\n    }\n  }\n\n  onClickRestart() {\n    const newGameState = [\n      [null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null]\n    ];\n    this.setState({\n      gameState: newGameState,\n      winner: null\n    });\n  }\n\n  computerMove() {\n    const { gameState } = this.state;\n    const color = \"r\";\n    const move = cf.figureNextMove(gameState, color);\n    const newGameState = cf.play(gameState, move, color);\n    if (cf.isStateValid(newGameState)) {\n      this.setState(\n        {\n          gameState: newGameState\n        },\n        () => {\n          let winner = cf.winner(newGameState);\n          if (winner) {\n            winner = color === \"y\" ? \"yellow\" : \"red\";\n            this.setState({ winner });\n          }\n        }\n      );\n    } else {\n      console.error(\"invalid game state\");\n    }\n  }\n\n  render() {\n    const { winner } = this.state;\n    const button1 =\n      this.state.mode === \"1\" ? styles.activeButton : styles.button;\n    const button2 =\n      this.state.mode === \"2\" ? styles.activeButton : styles.button;\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" width=\"100px\" />\n          {winner && <h1>{winner} wins!</h1>}\n          <div style={styles.modeContainer}>\n            <button style={button1} onClick={this.toggleMode} value=\"1\">\n              1 Player\n            </button>\n            <button style={button2} onClick={this.toggleMode} value=\"2\">\n              2 Players\n            </button>\n          </div>\n          {this.renderTable()}\n          <button style={styles.button} onClick={this.onClickRestart}>\n            Restart\n          </button>\n        </header>\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  yellowPlayer: {\n    borderRadius: \"25px\",\n    backgroundColor: \"yellow\",\n    width: \"40px\",\n    height: \"40px\",\n    margin: \"auto\"\n  },\n  redPlayer: {\n    borderRadius: \"25px\",\n    backgroundColor: \"red\",\n    width: \"40px\",\n    height: \"40px\",\n    margin: \"auto\"\n  },\n  cell: {\n    width: \"50px\",\n    height: \"50px\"\n  },\n  moveButton: {\n    width: \"40px\",\n    height: \"40px\"\n  },\n  button: {\n    width: \"120px\",\n    height: \"40px\",\n    margin: \"10px\",\n    cursor: \"pointer\"\n  },\n  activeButton: {\n    width: \"120px\",\n    height: \"40px\",\n    margin: \"10px\",\n    cursor: \"pointer\",\n    backgroundColor: \"grey\"\n  },\n  modeContainer: {\n    display: \"flex\",\n    justifyContent: \"flex-end\"\n  }\n};\n","import React from \"react\";\nimport Game from \"../Game/components/gameComponent\";\nimport \"./App.css\";\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./modules/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}