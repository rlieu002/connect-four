{"version":3,"sources":["modules/Game/utils/winner.js","modules/Game/utils/play.js","modules/Game/utils/move.js","constants/index.js","modules/Game/components/gameComponent.js","modules/App/App.js","serviceWorker.js","index.js","assets/logo.svg"],"names":["winner","gameState","i","length","checkColumns","row","isWinner","column","color","isHorizontalMatch","isDiagonalMatch","countVerticalMatch","isValue","error","numberConnected","forwardMatch","countHorizontalMatch","backwardMatch","matchCounter","verticalMatch","countDiagonalMatch","direction","counter","isStateValid","countColors","numYellow","numRed","checkEmptySlots","play","newGameState","getRow","undefined","forEach","nextMove","offenseMove","checkMoves","defenseMove","type","checkColor","getColor","columnRec","horizontalMatch","checkColumnsHorizontal","validateMove","diagonalMatch","checkColumnsDiagonal","isEmptyBelow","columnRecForward","columnRecBackward","checkRow","e","CONSTS","Object","freeze","buttonRow","Game","JSON","parse","stringify","state","mode","onClickMove","bind","onClickRestart","toggleMode","tableRows","this","map","rowIndex","columns","columnIndex","style","styles","yellowPlayer","redPlayer","key","cell","button","moveButton","onClick","value","border","target","setState","move","Number","cf","computerMove","console","Math","floor","random","button1","activeButton","button2","className","src","logo","alt","width","modeContainer","renderTable","Component","borderRadius","backgroundColor","height","margin","cursor","display","justifyContent","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.b5c89b78.chunk.js","sourcesContent":["/**\n * @param gameState state of the game represented as a two dimensional array\n * @return winner exists represented by boolean\n */\nconst winner = (gameState) => {\n  for (let i = 0; i < gameState.length; i++) {\n    if (checkColumns(gameState, i)) return true;\n  }\n  return false;\n};\n\nconst checkColumns = (gameState, row) => {\n  for (let i = 0; i < gameState[row].length; i++) {\n    if (gameState[row][i] !== null) {\n      if (isWinner(gameState, row, i, \"y\") || isWinner(gameState, row, i, \"r\")) return true;\n    }\n  }\n  return false;\n};\n\nconst isWinner = (gameState, row, column, color) => {\n  const numberConnected = 4;\n  return (\n    isHorizontalMatch(gameState, row, column, color, numberConnected) ||\n    isDiagonalMatch(gameState, row, column, color, numberConnected) ||\n    countVerticalMatch(gameState, row, column, color, numberConnected) === numberConnected\n  );\n};\n\n// check if space is within bounds\nconst isValue = (gameState, row, column, color) => {\n  try {\n    return gameState[row][column] === color;\n  } catch (error) {\n    return false;\n  }\n};\n\nconst isHorizontalMatch = (gameState, row, column, color, numberConnected) => {\n  const forwardMatch = countHorizontalMatch(\n    gameState,\n    row,\n    column,\n    color,\n    numberConnected,\n    \"forward\"\n  );\n  const backwardMatch = countHorizontalMatch(\n    gameState,\n    row,\n    column,\n    color,\n    numberConnected\n  );\n\n  return forwardMatch === numberConnected || backwardMatch === numberConnected;\n};\n\nconst countHorizontalMatch = (\n  gameState,\n  row,\n  column,\n  color,\n  numberConnected,\n) => {\n  let matchCounter = 0;\n  for (let i = column; i < column + numberConnected; i++) {\n    if (isValue(gameState, row, i, color)) matchCounter++;\n  }\n  return matchCounter;\n};\n\nconst countVerticalMatch = (gameState, row, column, color, numberConnected) => {\n  let verticalMatch = 0;\n  for (let i = row; i < row + numberConnected; i++) {\n    if (isValue(gameState, i, column, color)) verticalMatch++;\n  }\n  return verticalMatch;\n};\n\nconst isDiagonalMatch = (gameState, row, column, color, numberConnected) => {\n  const forwardMatch = countDiagonalMatch(\n    gameState,\n    row,\n    column,\n    color,\n    numberConnected,\n    \"forward\"\n  );\n  const backwardMatch = countDiagonalMatch(\n    gameState,\n    row,\n    column,\n    color,\n    numberConnected\n  );\n  return forwardMatch === numberConnected || backwardMatch === numberConnected;\n};\n\nconst countDiagonalMatch = (\n  gameState,\n  row,\n  column,\n  color,\n  numberConnected,\n  direction\n) => {\n  let counter = 0;\n  let matchCounter = 0;\n\n  while (counter < numberConnected) {\n    const checkRow = row + counter;\n    const checkColumn =\n      direction === \"forward\" ? column + counter : column - counter;\n    if (isValue(gameState, checkRow, checkColumn, color)) matchCounter++;\n    counter++;\n  }\n  return matchCounter;\n};\n\nexport {\n  isValue,\n  isHorizontalMatch,\n  countHorizontalMatch,\n  countVerticalMatch,\n  isDiagonalMatch,\n  countDiagonalMatch,\n  winner\n};\n","/**\n * @param gameState state of the game represented as a two dimensional array\n * @return player color represented by a string\n */\nexport const getCurrentPlayer = gameState => {\n  const [numYellow, numRed] = countColors(gameState);\n\n  const color = numYellow > numRed ? \"r\" : \"y\";\n  return color;\n};\n\n/**\n * @param gameState state of the game represented as a two dimensional array\n * @return valid game state represented by boolean\n */\nexport const isStateValid = gameState => {\n  if (!gameState) return false;\n  const [numYellow, numRed] = countColors(gameState);\n\n  // anomalies include:\n  // players who have exceeded their turn\n  if (numYellow < numRed || numYellow - numRed > 1) {\n    return false;\n    // slots filled where there are empty slots below\n  } else if (checkEmptySlots(gameState)) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * @param gameState state of the game represented as a two dimensional array\n * @param column column represented as a number\n * @param color color represented by a string\n * @return new game state represented as a two dimensional array\n */\nexport const play = (gameState, column, color) => {\n  let newGameState = gameState;\n  if (column < 0 || column > 6) return false;\n  if (!(color === \"y\" || color === \"r\")) return false;\n\n  const row = getRow(gameState, column);\n  if (row === undefined) return false;\n  newGameState[row][column] = color;\n\n  return newGameState;\n};\n\n// counts number of yellow and red moves\nconst countColors = gameState => {\n  let numYellow = 0;\n  let numRed = 0;\n\n  gameState.forEach(row => {\n    row.forEach(column => {\n      if (column === \"y\") {\n        numYellow++;\n      } else if (column === \"r\") {\n        numRed++;\n      }\n    });\n  });\n  return [numYellow, numRed];\n};\n\n// checks if there are empty slots below existing moves\nconst checkEmptySlots = gameState => {\n  for (let row = gameState.length - 2; row >= 0; row--) {\n    for (let column = 0; column < 7; column++) {\n      if (gameState[row][column]) {\n        if (!gameState[row + 1][column]) return true;\n      }\n    }\n  }\n  return false;\n};\n\n// gets next row based on current column\nexport const getRow = (gameState, column) => {\n  let row = gameState.length - 1;\n\n  while (row >= 0) {\n    if (gameState[row][column]) {\n      row--;\n    } else {\n      return row;\n    }\n  }\n};\n\n// Bonus\n// const checkSquareWin = (gameState, row, column) => {\n//   const color = gameState[row][column];\n//   const secondMove = gameState[row][column + 1] === color;\n//   const thirdMove = gameState[row - 1][column] === color;\n//   const fourthMove = gameState[row - 1][column + 1] === color;\n\n//   return (secondMove && thirdMove && fourthMove);\n// }\n\n// const checkL0Win = (gameState, row, column) => {\n//   const color = gameState[row][column];\n//   const secondMove = gameState[row][column + 1] === color;\n//   const thirdMove = gameState[row - 1][column] === color;\n//   const fourthMove = gameState[row - 2][column] === color;\n\n//   return (secondMove && thirdMove && fourthMove);\n// }\n\n// const checkL90Win = (gameState, row, column) => {\n//   const color = gameState[row][column];\n//   const secondMove = gameState[row][column + 1] === color;\n//   const thirdMove = gameState[row][column + 2][column] === color;\n//   const fourthMove = gameState[row - 1][column + 2] === color;\n\n//   return (secondMove && thirdMove && fourthMove);\n// }\n\n// const checkL180Win = (gameState, row, column) => {\n//   const color = gameState[row][column];\n//   const secondMove = gameState[row - 1][column] === color;\n//   const thirdMove = gameState[row - 2][column] === color;\n//   const fourthMove = gameState[row - 2][column - 1] === color;\n\n//   return (secondMove && thirdMove && fourthMove);\n// }\n\n// const checkL270Win = (gameState, row, column) => {\n//   const color = gameState[row][column];\n//   const secondMove = gameState[row - 1][column] === color;\n//   const thirdMove = gameState[row - 1][column + 1] === color;\n//   const fourthMove = gameState[row - 1][column + 2] === color;\n\n//   return (secondMove && thirdMove && fourthMove);\n// }\n\n// const winConfig = {\n//   'square': checkSquareWin,\n//   'L0': checkL0Win,\n//   'L90': checkL90Win,\n//   'L180': checkL180Win,\n//   'L270': checkL270Win,\n// };\n\n// const checkBonusWin = (gameState, type) => {\n//   for (let row = gameState.length - 1; row < 0; row--) {\n//     for (let column = 0; column < row.length; column++) {\n//       if (gameState[row][column]) {\n//         if (winConfig[type](gameState, row, column)) return true;\n//       }\n//     }\n//   }\n\n//   return false;\n// }\n","import {\n  getRow,\n  countHorizontalMatch,\n  countVerticalMatch,\n  countDiagonalMatch,\n} from \"./index\";\n\n/**\n * @param gameState state of the game represented as a two dimensional array\n * @param color color represented by a string\n * @return column represented as a number\n */\nexport const figureNextMove = (gameState, color) => {\n  const move = nextMove(gameState, color, 3);\n  if (move !== null) return move;\n\n  const row = getRow(gameState, 3);\n  return row !== undefined ? 3 : Math.floor(Math.random() * 6);\n};\n\nconst nextMove = (gameState, color, numberConnected) => {\n  let counter = numberConnected;\n  while (counter > 1) {\n    const offenseMove = checkMoves(gameState, color, counter);\n    if (offenseMove !== null) return offenseMove;\n    const defenseMove = checkMoves(gameState, color, counter, \"defense\");\n    if (defenseMove !== null) return defenseMove;\n    counter--;\n  }\n  return null;\n};\n\nconst checkMoves = (gameState, color, numberConnected, type) => {\n  const checkColor = getColor(color, type);\n  for (let i = 0; i < gameState.length; i++) {\n    const columnRec = checkColumns(gameState, i, checkColor, numberConnected);\n    if (columnRec !== null) return columnRec;\n  }\n  return null;\n};\n\nconst checkColumns = (gameState, row, color, numberConnected) => {\n  for (let i = 0; i < gameState[row].length; i++) {\n    if (gameState[row][i] !== null) {\n      const horizontalMatch = checkColumnsHorizontal(\n        gameState,\n        row,\n        i,\n        color,\n        numberConnected\n      );\n      if (horizontalMatch !== null) return horizontalMatch;\n      const verticalMatch = countVerticalMatch(\n        gameState,\n        row,\n        i,\n        color,\n        numberConnected\n      );\n      if (verticalMatch === numberConnected && validateMove(gameState, row, i)) return i;\n      const diagonalMatch = checkColumnsDiagonal(\n        gameState,\n        row,\n        i,\n        color,\n        numberConnected\n      );\n      if (diagonalMatch !== null) return diagonalMatch;\n    }\n  }\n  return null;\n};\n\nconst checkColumnsHorizontal = (\n  gameState,\n  row,\n  column,\n  color,\n  numberConnected\n) => {\n  const horizontalMatch = countHorizontalMatch(\n    gameState,\n    row,\n    column,\n    color,\n    numberConnected\n  );\n  const columnRec = validateMove(gameState, row, column - 1, \"horizontal\") ? column - 1 : column + numberConnected;\n  if (horizontalMatch === numberConnected && validateMove(gameState, row, columnRec, \"horizontal\") && !isEmptyBelow(gameState, row, columnRec)) return columnRec;\n  return null;\n};\n\nconst checkColumnsDiagonal = (\n  gameState,\n  row,\n  column,\n  color,\n  numberConnected\n) => {\n  const forwardMatch = countDiagonalMatch(\n    gameState,\n    row,\n    column,\n    color,\n    numberConnected,\n    \"forward\"\n  );\n  const columnRecForward = column - 1;\n  if (forwardMatch === numberConnected && validateMove(gameState, row, columnRecForward) && !isEmptyBelow(gameState, row, columnRecForward)) return columnRecForward;\n  const backwardMatch = countDiagonalMatch(\n    gameState,\n    row,\n    column,\n    color,\n    numberConnected\n  );\n  const columnRecBackward = column + 1;\n  if (backwardMatch === numberConnected && validateMove(gameState, row, columnRecBackward) && !isEmptyBelow(gameState, row, columnRecBackward)) return columnRecBackward;\n  return null;\n};\n\n// get color based on offense or defense\nconst getColor = (color, type) => {\n  if (type === \"defense\") {\n    return color === \"y\" ? \"r\" : \"y\";\n  } else {\n    return color;\n  }\n};\n\n// check if space is available\nconst validateMove = (gameState, row, column, type) => {\n  const checkRow = type === \"horizontal\" ? row : row - 1;\n  try {\n    return gameState[checkRow][column] === null;\n  } catch (e) {\n    return false;\n  }\n};\n\n// checks for empty rows below space\nconst isEmptyBelow = (gameState, row, column) => {\n  if (row < gameState.length - 1) {\n    for (let i = row + 1; i < gameState.length; i++) {\n      if (gameState[i][column] === null) return true;\n    }\n  }\n  return false;\n};\n","const newGameState = [\n  [null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null]\n];\n\nexport const CONSTS = Object.freeze({\n  newGameState,\n  buttonRow: [0, 1, 2, 3, 4, 5, 6]\n});\n","import React, { Component } from \"react\";\nimport * as cf from \"../utils\";\nimport logo from \"../../../assets/logo.svg\";\nimport { CONSTS } from \"../../../constants\";\n\nexport default class Game extends Component {\n  constructor() {\n    super();\n\n    const gameState = JSON.parse(JSON.stringify(CONSTS.newGameState));\n    this.state = {\n      gameState,\n      mode: \"1\",\n      winner: null\n    };\n\n    this.onClickMove = this.onClickMove.bind(this);\n    this.onClickRestart = this.onClickRestart.bind(this);\n    this.toggleMode = this.toggleMode.bind(this);\n  }\n\n  renderTable() {\n    const { gameState } = this.state;\n    const tableRows = gameState.map((row, rowIndex) => {\n      const columns = row.map((column, columnIndex) => {\n        let style = {};\n        if (column === \"y\") {\n          style = styles.yellowPlayer;\n        } else if (column === \"r\") {\n          style = styles.redPlayer;\n        }\n\n        return (\n          <td key={columnIndex} style={styles.cell}>\n            <div style={style}></div>\n          </td>\n        );\n      });\n\n      return <tr key={rowIndex}>{columns}</tr>;\n    });\n\n    const buttonRow = CONSTS.buttonRow.map(button => (\n      <td key={button} style={styles.cell}>\n        <button\n          style={styles.moveButton}\n          onClick={this.onClickMove}\n          value={button}\n        ></button>\n      </td>\n    ));\n\n    return (\n      <table border=\"1\">\n        {tableRows}\n        <tr>{buttonRow}</tr>\n      </table>\n    );\n  }\n\n  toggleMode(e) {\n    const mode = e.target.value;\n    this.setState({ mode });\n  }\n\n  onClickMove(e) {\n    const move = Number(e.target.value);\n    const { gameState, winner, mode } = this.state;\n    if (!winner) {\n      const color = cf.getCurrentPlayer(gameState);\n      const newGameState = cf.play(gameState, move, color);\n      if (cf.isStateValid(newGameState)) {\n        this.setState(\n          {\n            gameState: newGameState\n          },\n          () => {\n            let winner = cf.winner(newGameState);\n            if (winner) {\n              winner = color === \"y\" ? \"yellow\" : \"red\";\n              this.setState({ winner });\n            } else if (mode === \"1\") {\n              this.computerMove();\n            }\n          }\n        );\n      } else {\n        console.error(\"invalid game state\");\n      }\n    }\n  }\n\n  onClickRestart() {\n    const gameState = JSON.parse(JSON.stringify(CONSTS.newGameState));\n    this.setState({\n      gameState,\n      winner: null\n    });\n  }\n\n  computerMove() {\n    const { gameState } = this.state;\n    const color = \"r\";\n    const move = cf.figureNextMove(gameState, color);\n    const newGameState = cf.play(gameState, move, color);\n    if (cf.isStateValid(newGameState)) {\n      this.setState(\n        {\n          gameState: newGameState\n        },\n        () => {\n          let winner = cf.winner(newGameState);\n          if (winner) {\n            winner = color === \"y\" ? \"yellow\" : \"red\";\n            this.setState({ winner });\n          }\n        }\n      );\n    } else {\n      console.error(\"invalid game state\");\n    }\n  }\n\n  render() {\n    const { winner } = this.state;\n    const button1 =\n      this.state.mode === \"1\" ? styles.activeButton : styles.button;\n    const button2 =\n      this.state.mode === \"2\" ? styles.activeButton : styles.button;\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" width=\"100px\" />\n          {winner && <h1>{winner} wins!</h1>}\n          <div style={styles.modeContainer}>\n            <button style={button1} onClick={this.toggleMode} value=\"1\">\n              1 Player\n            </button>\n            <button style={button2} onClick={this.toggleMode} value=\"2\">\n              2 Players\n            </button>\n          </div>\n          {this.renderTable()}\n          <button style={styles.button} onClick={this.onClickRestart}>\n            Restart\n          </button>\n        </header>\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  yellowPlayer: {\n    borderRadius: \"25px\",\n    backgroundColor: \"yellow\",\n    width: \"40px\",\n    height: \"40px\",\n    margin: \"auto\"\n  },\n  redPlayer: {\n    borderRadius: \"25px\",\n    backgroundColor: \"red\",\n    width: \"40px\",\n    height: \"40px\",\n    margin: \"auto\"\n  },\n  cell: {\n    width: \"50px\",\n    height: \"50px\"\n  },\n  moveButton: {\n    width: \"40px\",\n    height: \"40px\"\n  },\n  button: {\n    width: \"120px\",\n    height: \"40px\",\n    margin: \"10px\",\n    cursor: \"pointer\"\n  },\n  activeButton: {\n    width: \"120px\",\n    height: \"40px\",\n    margin: \"10px\",\n    cursor: \"pointer\",\n    backgroundColor: \"grey\"\n  },\n  modeContainer: {\n    display: \"flex\",\n    justifyContent: \"flex-end\"\n  }\n};\n","import React from \"react\";\nimport Game from \"../Game/components/gameComponent\";\nimport \"./App.css\";\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./modules/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}